# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import grpc_pb2 as grpc__pb2


class ReplicatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.new_with_time = channel.unary_unary(
                '/grpc_defs.Replicator/new_with_time',
                request_serializer=grpc__pb2.LockDataRefId.SerializeToString,
                response_deserializer=grpc__pb2.Empty.FromString,
                )
        self.serve_read = channel.unary_unary(
                '/grpc_defs.Replicator/serve_read',
                request_serializer=grpc__pb2.ReadRequest.SerializeToString,
                response_deserializer=grpc__pb2.Value.FromString,
                )
        self.serve_range_read = channel.unary_unary(
                '/grpc_defs.Replicator/serve_range_read',
                request_serializer=grpc__pb2.ReadRequest.SerializeToString,
                response_deserializer=grpc__pb2.ValueRanged.FromString,
                )
        self.serve_write = channel.unary_unary(
                '/grpc_defs.Replicator/serve_write',
                request_serializer=grpc__pb2.WriteRequest.SerializeToString,
                response_deserializer=grpc__pb2.WriteError.FromString,
                )
        self.commit = channel.unary_unary(
                '/grpc_defs.Replicator/commit',
                request_serializer=grpc__pb2.LockDataRefId.SerializeToString,
                response_deserializer=grpc__pb2.Empty.FromString,
                )
        self.abort = channel.unary_unary(
                '/grpc_defs.Replicator/abort',
                request_serializer=grpc__pb2.LockDataRefId.SerializeToString,
                response_deserializer=grpc__pb2.Empty.FromString,
                )


class ReplicatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def new_with_time(self, request, context):
        """Creates a new transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serve_read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serve_range_read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serve_write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'new_with_time': grpc.unary_unary_rpc_method_handler(
                    servicer.new_with_time,
                    request_deserializer=grpc__pb2.LockDataRefId.FromString,
                    response_serializer=grpc__pb2.Empty.SerializeToString,
            ),
            'serve_read': grpc.unary_unary_rpc_method_handler(
                    servicer.serve_read,
                    request_deserializer=grpc__pb2.ReadRequest.FromString,
                    response_serializer=grpc__pb2.Value.SerializeToString,
            ),
            'serve_range_read': grpc.unary_unary_rpc_method_handler(
                    servicer.serve_range_read,
                    request_deserializer=grpc__pb2.ReadRequest.FromString,
                    response_serializer=grpc__pb2.ValueRanged.SerializeToString,
            ),
            'serve_write': grpc.unary_unary_rpc_method_handler(
                    servicer.serve_write,
                    request_deserializer=grpc__pb2.WriteRequest.FromString,
                    response_serializer=grpc__pb2.WriteError.SerializeToString,
            ),
            'commit': grpc.unary_unary_rpc_method_handler(
                    servicer.commit,
                    request_deserializer=grpc__pb2.LockDataRefId.FromString,
                    response_serializer=grpc__pb2.Empty.SerializeToString,
            ),
            'abort': grpc.unary_unary_rpc_method_handler(
                    servicer.abort,
                    request_deserializer=grpc__pb2.LockDataRefId.FromString,
                    response_serializer=grpc__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_defs.Replicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Replicator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def new_with_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.Replicator/new_with_time',
            grpc__pb2.LockDataRefId.SerializeToString,
            grpc__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serve_read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.Replicator/serve_read',
            grpc__pb2.ReadRequest.SerializeToString,
            grpc__pb2.Value.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serve_range_read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.Replicator/serve_range_read',
            grpc__pb2.ReadRequest.SerializeToString,
            grpc__pb2.ValueRanged.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serve_write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.Replicator/serve_write',
            grpc__pb2.WriteRequest.SerializeToString,
            grpc__pb2.WriteError.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.Replicator/commit',
            grpc__pb2.LockDataRefId.SerializeToString,
            grpc__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.Replicator/abort',
            grpc__pb2.LockDataRefId.SerializeToString,
            grpc__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MainReplicatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_transaction = channel.unary_unary(
                '/grpc_defs.MainReplicator/create_transaction',
                request_serializer=grpc__pb2.Empty.SerializeToString,
                response_deserializer=grpc__pb2.LockDataRefId.FromString,
                )
        self.read = channel.unary_unary(
                '/grpc_defs.MainReplicator/read',
                request_serializer=grpc__pb2.ReadRequest.SerializeToString,
                response_deserializer=grpc__pb2.Json.FromString,
                )
        self.write = channel.unary_unary(
                '/grpc_defs.MainReplicator/write',
                request_serializer=grpc__pb2.JsonWriteRequest.SerializeToString,
                response_deserializer=grpc__pb2.Json.FromString,
                )
        self.abort = channel.unary_unary(
                '/grpc_defs.MainReplicator/abort',
                request_serializer=grpc__pb2.LockDataRefId.SerializeToString,
                response_deserializer=grpc__pb2.Empty.FromString,
                )
        self.commit = channel.unary_unary(
                '/grpc_defs.MainReplicator/commit',
                request_serializer=grpc__pb2.LockDataRefId.SerializeToString,
                response_deserializer=grpc__pb2.Empty.FromString,
                )


class MainReplicatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_transaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def write(self, request, context):
        """Todo: better return type for write error/success messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MainReplicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_transaction': grpc.unary_unary_rpc_method_handler(
                    servicer.create_transaction,
                    request_deserializer=grpc__pb2.Empty.FromString,
                    response_serializer=grpc__pb2.LockDataRefId.SerializeToString,
            ),
            'read': grpc.unary_unary_rpc_method_handler(
                    servicer.read,
                    request_deserializer=grpc__pb2.ReadRequest.FromString,
                    response_serializer=grpc__pb2.Json.SerializeToString,
            ),
            'write': grpc.unary_unary_rpc_method_handler(
                    servicer.write,
                    request_deserializer=grpc__pb2.JsonWriteRequest.FromString,
                    response_serializer=grpc__pb2.Json.SerializeToString,
            ),
            'abort': grpc.unary_unary_rpc_method_handler(
                    servicer.abort,
                    request_deserializer=grpc__pb2.LockDataRefId.FromString,
                    response_serializer=grpc__pb2.Empty.SerializeToString,
            ),
            'commit': grpc.unary_unary_rpc_method_handler(
                    servicer.commit,
                    request_deserializer=grpc__pb2.LockDataRefId.FromString,
                    response_serializer=grpc__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_defs.MainReplicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MainReplicator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_transaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.MainReplicator/create_transaction',
            grpc__pb2.Empty.SerializeToString,
            grpc__pb2.LockDataRefId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.MainReplicator/read',
            grpc__pb2.ReadRequest.SerializeToString,
            grpc__pb2.Json.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.MainReplicator/write',
            grpc__pb2.JsonWriteRequest.SerializeToString,
            grpc__pb2.Json.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.MainReplicator/abort',
            grpc__pb2.LockDataRefId.SerializeToString,
            grpc__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_defs.MainReplicator/commit',
            grpc__pb2.LockDataRefId.SerializeToString,
            grpc__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
